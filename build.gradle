allprojects {
    plugins.withId("com.liferay.node") {
        node.download = false
        node.global = true
        node.useNpm = false
    }
    develocity {
        buildScan {
            termsOfUseUrl = 'https://gradle.com/help/legal-terms-of-use'
            termsOfUseAgree = 'yes'
        }
    }

}

subprojects { subproject ->
    if (!subproject.name.startsWith('frontend-js')) {
        plugins.withId("java") {
            sourceCompatibility = "${javaSourceCompatibility}"
            dependencies {
                annotationProcessor "org.projectlombok:lombok:${rootProject.getProperty('org.projectlombok.lombok.version')}"
                compileOnly group: "com.liferay.portal", name: "release.portal.api"
                compileOnly group: "org.projectlombok", name: "lombok", version: "${rootProject.getProperty('org.projectlombok.lombok.version')}"
                testAnnotationProcessor "org.projectlombok:lombok:${rootProject.getProperty('org.projectlombok.lombok.version')}"
                testCompileOnly group: "org.projectlombok", name: "lombok", version: "${rootProject.getProperty('org.projectlombok.lombok.version')}"
                testImplementation group: "com.liferay.portal", name: "release.portal.api"
                testImplementation group: "org.hamcrest", name: "hamcrest", version:  "${rootProject.getProperty('org.hamcrest.hamcrest.version')}"
                testImplementation group: "org.junit.jupiter", name: "junit-jupiter", version: "${rootProject.getProperty('junit-jupiter-api.version')}"
                testRuntimeOnly group: "org.junit.platform", name: "junit-platform-launcher", version: "${rootProject.getProperty('org.junit.platform.junit-platform-launcher.version')}"
                testImplementation group: "org.mockito", name: "mockito-core", version: "${rootProject.getProperty('org.mockito.mockito-core.version')}"
            }
            test {
                useJUnitPlatform()
            }
        }

        apply plugin: 'maven-publish'
        publishing {
            repositories {
                mavenLocal()
                maven {
                    credentials {
                        username "${repositoryUser}"
                        password "${repositoryPassword}"
                    }
                    def snapshotRepoId = "${repositorySnapshotRepoId}"
                    def releaseRepoId = "${repositoryReleaseRepoId}"
                    def mavenVersion = "${mavenVersion}"
                    def baseUrl = "${repositoryProtocol}" + '://' + "${repositoryHost}" + "${repositoryPath}" + '/'
                    url = mavenVersion.endsWith('SNAPSHOT') ? baseUrl + snapshotRepoId : baseUrl + releaseRepoId
                    allowInsecureProtocol = false
                }
            }
        }

        repositories {
            mavenLocal()
            maven {
                url "${gradleRepositoryUrl}"
            }
            maven {
                url "${liferayRepositoryUrl0}"
            }
            maven {
                url "${liferayRepositoryUrl1}"
            }
            maven {
                url "${repositoryProtocol}://" + "${repositoryHost}" + "${repositoryPath}" + '/' + "${repositoryAllRepoId}"
                allowInsecureProtocol = false
            }
            mavenCentral()
            gradlePluginPortal()
        }
    }
}

task yarnInstallCmd(type: Exec) {
    println "Executing yarn install..."
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        executable "yarn.cmd"
    } else {
        executable "yarn"
    }
    args "install"
    println "Done"
}

yarnInstall {
    dependsOn([yarnInstallCmd])
}

